'use strict';
module.exports = function(grunt) {

  grunt.initConfig({
    jshint: {
      options: {
        jshintrc: '.jshintrc'
      },
      all: [
        'Gruntfile.js',
        'assets/js/*.js',
        'assets/js/plugins/*.js',
        '!assets/js/scripts.min.js'
      ]
    },
    recess: {
      dist: {
        options: {
          compile: true,
          compress: true
        },
        files: {
          'assets/css/main.min.css': [
            'assets/less/main.less'
          ]
//,
//           'assets/examples/fw/styles/main.min.css':
//	  ['assets/examples/fw/styles/main.scss']
        }
      }
    },

    uglify: {
      dist: {
        files: {
          'assets/js/scripts.min.js': [
            'assets/js/plugins/*.js',
            'assets/js/_*.js'
          ],

	  'assets/examples/fw/scripts/main.min.js':
	  ['assets/examples/fw/scripts/main.js'],

	  'assets/examples/fw/data/data.min.js':
	  ['assets/examples/fw/data/*.js'],
        }
      }
    },
    // imageoptim: {        // replaces original files
    //   options: {
    //     quitAfter: true
    //   },
    //   allPngs: {
    //     options: {
    //       imageAlpha: true,
    //       jpegMini: false
    //     },
    //     src: ['images/{,*/}*.{png,gif}']
    //   },
    //   allJpgs: {
    //     options: {
    //       imageAlpha: false,
    //       jpegMini: true
    //     },
    //     src: ['images/{,*/}*.{jpg,jpeg}']
    //   }
    // },
    imagemin: {
      dist: {
        options: {
          optimizationLevel: 7,
          progressive: true
        },
        files: [{
          expand: true,
          cwd: 'images/',
          src: '{,*/}*.{png,jpg,jpeg}',
          dest: 'images/'
        }]
      }
    },
    svgmin: {
      dist: {
        files: [{
          expand: true,
          cwd: 'images/',
          src: '{,*/}*.svg',
          dest: 'images/'
        }]
      }
    },
        //'assets/css/main.min.css'
    // uncss: {
    //   dist: {
    //     options: {
    //       stylesheets: ['assets/css/main.min.css']  // begin with the output of recess
    //     },
    //     files: {
    //       'assets/css/main.uncss.css' : ['_site/**.html'] //expect main.min.css referenced in head.html
    //     }
    //   }
    // },
    // inlinecss: {
    //   main: {
    //     options: {
    //       url: '_site/assets/css/',
    //       removeLinkTags: false
    //     },
    //     files: {
    //       '_includes/head_INLINE-CSS.html': '_includes/head.html'
    //     }
    //   }
    // },
    inline: {
      options: {
        cssmin: true
      },
      dist: {
        src: '_includes/head.src.html',
        dest: '_includes/head.html',
      }
    },
    watch: {
      configFiles: {
        files: [ 'Gruntfile.js', '_config.yml' ],
        options: {
          reload: true
        }
      },
      html: {
        files: ['**/*.html', '!_site/**/*.html']
      },
      less: {
        files: [
          'assets/less/*.less', '!_site/**/css/*.css',
	  'assets/examples/fw/style/*.scss', '!_site/assets/examples/style/*.css'
        ],
        tasks: ['recess']
      },
      js: {
        files: [
          '<%= jshint.all %>'
        ],
        tasks: ['uglify']
      }
    },
    clean: {
      dist: [
        'assets/css/main.min.css',
        'assets/css/main.uncss.css',
        '_includes/head.html', //head.src.html is source. Other is generated by grunt-inline.
        'assets/js/scripts.min.js'
      ]
    }
  });

  // Load tasks
  grunt.loadNpmTasks('grunt-contrib-clean');
  grunt.loadNpmTasks('grunt-contrib-jshint');
  grunt.loadNpmTasks('grunt-contrib-uglify');
  grunt.loadNpmTasks('grunt-contrib-watch');
  grunt.loadNpmTasks('grunt-recess');
  // grunt.loadNpmTasks('grunt-uncss');
  grunt.loadNpmTasks('grunt-inline');
  grunt.loadNpmTasks('grunt-contrib-imagemin');
  //grunt.loadNpmTasks('grunt-imageoptim');
  //grunt.loadNpmTasks('grunt-svgmin');

  // Register tasks
  grunt.registerTask('default', [
    'clean',
    'recess',
    'uglify',
    'imagemin',
    //'imageoptim',
    // 'uncss',
    'inline'
  ]);
  grunt.registerTask('dev', [
    'watch'
  ]);

};
